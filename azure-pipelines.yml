# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  # Container registry service connection established during pipeline creation
  tag: '$(Build.BuildId)'
  # tag: 41


  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Install
  variables:
  - group: personal
  - name: temppwfilename
    value: 'tempPW.txt'
  - name: imgName
    value: 'releaseFirstApp'
  displayName: trying to build and push and pull and deploy
  jobs:
      # This deployment using the approval environment act as a guard for this entire stage. Even if 
      # i put a job above this deployment, it wont run until it gets approval.
    - deployment: Approval
      environment: ApprovalQA
      timeoutInMinutes: 5
      displayName: 'Awaiting approval'
      
      # This job will only run if its coming from hotfix branch
    - job: 'HotfixBranchTest'
      displayName: Running test on hotfix pushes
      condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')
      steps:
      - script: |
          echo 'All is good. Running for branch: $(Build.SourceBranch)'
      
    - job: I1J1
      displayName: Install Job1
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - script: |
          sudo docker images
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      - script: |
          cat Dockerfile
          sudo docker login -u $(CR_USERNAME) -p $(CR_PASSWORD) $(CR_SERVER)
          sudo docker build -t $(CR_SERVER)/firstapp:v1.0.$(tag) .
          sudo docker push $(CR_SERVER)/firstapp:v1.0.$(tag)
          sudo docker images
      - task: SSH@0
        inputs:
          failOnStderr: false
          sshEndpoint: 'ubuntuPrivateTesting'
          runOptions: 'inline'
          inline: |
            echo "$(CR_PASSWORD)" > $(temppwfilename)
            docker ps | grep -i release && (sudo docker stop $(imgName);sudo docker rm $(imgName))
            cat $(temppwfilename) | docker login -u $(CR_USERNAME) --password-stdin $(CR_SERVER)
            rm $(temppwfilename)
            docker pull $(CR_SERVER)/firstapp:v1.0.$(tag)
            docker run -d --name $(imgName) -p 5003:8080 $(CR_SERVER)/firstapp:v1.0.$(tag)
          readyTimeout: '20000'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'aSampleApp'
          publishLocation: 'pipeline'